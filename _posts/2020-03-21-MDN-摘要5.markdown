---
layout: post
title: "摘要 - MDN HTML CSS Basis"
description: "Basic CSS knowledge forked from MDN"
tags:
    - Excerpt
    - CSS
---
I don't think CSS(Cascading Style Sheets) is a programming language. However, I am still willing to learn it with the enthusiasm of learning a language.

## CSS 简介

#### 级联规则&专用规则

```html
<p class="special">What color am I?</p>
```

1 -&gt; 段落是红色的，一个类被描述为比元素选择器更具体，或者具有更多的特异性

```css
.special {
  color: red;
}
p {
  color: blue;
}
```

2 -&gt; 段落是蓝色的，因为第二个样式覆盖了第一个样式

```css
p {
  color: red;
}
p {
  color: blue;
}
```

> 在CSS(和其他网络标准)中，当语言表达存在不确定性时，美国的拼写被视作公认的标准。例如，颜色应该始终拼写为color。colour是不起作用的。

#### 函数

CSS可以应用一些简单的函数，如`calc()`

```css
.box {
  padding: 10px;
  width: calc(90% - 30px);
  background-color: rebeccapurple;
  color: white;
}
```

另一个例子是[`<transform>`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform), 例如 `rotate()`:

```css
.box {
  margin: 30px;
  width: 100px;
  height: 100px;
  background-color: rebeccapurple;
  transform: rotate(0.8turn)
}
```

#### @规则

如导入其他的样式表到主样式表。

```css
@import 'styles2.css';
```

如媒体查询，如果浏览器的宽度大于30em，则背景色将为蓝色。

```css
body {
  background-color: pink;
}

@media (min-width: 30em) {
  body {
    background-color: blue;
  }
}
```

#### 速记属性

一些属性，如 [`font`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font), [`background`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/background), [`padding`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding), [`border`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border), and [`margin`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin) 等属性称为速记属性--这是因为它们允许您在一行中设置多个属性值，从而节省时间并使代码更整洁。

#### 注释

```css
/* Handle basic element styling */
/* ---------------------------------------*/
```

## CSS工作原理

1. 浏览器载入HTML文件（比如从网络上获取）。
2. 将HTML文件转化成一个DOM（Document Object Model），DOM是文件在计算机内存中的表现形式，下一节将更加详细的解释DOM。
3. 接下来，浏览器会拉取该HTML相关的大部分资源，比如嵌入到页面的图片、视频和CSS样式。JavaScript则会稍后进行处理，简单起见，同时此节主讲CSS，所以这里对如何加载JavaScript不会展开叙述。
4. 浏览器拉取到CSS之后会进行解析，根据选择器的不同类型（比如element、class、id等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id选择器等）应用在对应的DOM的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。
5. 上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。
6. 网页展示在屏幕上（这一步被称为着色）。

![img](https://mdn.mozillademos.org/files/11781/rendering.svg)

```css
.box {
  width: 500px;
  width: calc(100% - 50px);
}
```

老式的浏览器由于无法解析忽略这一行；新式的浏览器则会把这一行解析成像素值，并且覆盖第一行指定的宽度。

## 层叠与继承

#### 继承的3个值：

[`inherit`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inherit)

设置该属性会使子元素属性和父元素相同。实际上，就是 "开启继承".

[`initial`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/initial)

设置属性值和浏览器默认样式相同。如果浏览器默认样式中未设置且该属性是自然继承的，那么会设置为 `inherit` 。

[`unset`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/unset)

将属性重置为自然值，也就是如果属性是自然继承那么就是 `inherit`，否则和 `initial`一样

<ul>
    <li>Default <a href="#">link</a> color</li> <!-- blue -->
    <li class="my-class-1">Inherit the <a href="#">link</a> color</li> <!--green-->
    <li class="my-class-2">Reset the <a href="#">link</a> color</li><!--black-->
    <li class="my-class-3">Unset the <a href="#">link</a> color</li><!--green-->
</ul>

```css
body {
    color: green;
}
          
.my-class-1 a {
    color: inherit;
}
          
.my-class-2 a {
    color: initial;
}
          
.my-class-3 a {
    color: unset;
}
```

#### 重设所有属性

上面的blockquote会被设置为背景为红色有着绿色边框的样式；而下面的blockquote则会恢复默认状态。

```css
blockquote {
    background-color: red;
    border: 2px solid green;
}
        
.fix-this {
    all: unset;
}
```

```html
<blockquote>
  <p>This blockquote is styled</p>
</blockquote>

<blockquote class="fix-this">
  <p>This blockquote is not styled</p>
</blockquote>
```

#### 选择器的权重

一个选择器的优先级可以说是由四个部分相加 (分量)，可以认为是**个十百千**  四位数的四个位数：

1. **千位**： 如果声明在 `style` 的属性（内联样式）则该位得一分。这样的声明没有选择器，所以它得分总是1000。
2. **百位**： 选择器中包含ID选择器则该位得一分。
3. **十位**： 选择器中包含类选择器、属性选择器或者伪类则该位得一分。
4. **个位**：选择器中包含元素、伪元素选择器则该位得一分。

> ⚠️注意：通用选择器 (`*`)，组合符 (`+`, `>`, `~`, ' ')，和否定伪类 (`:not`) 不会影响优先级。
>
> ⚠️警告：在进行计算时不允许进行进位，例如，20 个类选择器仅仅意味着 20 个十位，而不能视为 两个百位，也就是说，无论多少个类选择器的权重叠加，都不会超过一个 ID 选择器。

有一个特殊的 CSS 可以用来覆盖所有上面所有优先级计算，不过需要很小心的使用 — `!important`。用于修改特定属性的值， 能够覆盖普通规则的层叠。

比如：

```css
div{
	border: none !important
}
```

> ⚠️注意： 覆盖 `!important` 唯一的办法就是另一个 `!important` 具有 相同*优先级* 而且顺序靠后，或者更高优先级。**强烈建议除了非常情况不要使用它。** 

## Selector

#### Combination

When combined however, neither the `h1` nor the class will be styled as the entire rule is deemed invalid.

```css
h1, ..special { 
  color: blue; 
}
```

#### Child combinator

The final group of selectors combine other selectors in order to target elements within our documents. The following for example selects paragraphs that are direct children of `<article>` elements using the child combinator (>).

```css
article > p { }
```

#### first-child

* `article:first-child`: will select any `<article>` element that is the first child of another element.
* `article: first-child`: will select the first child of any  `<article>`  element.
* `article *:first-child`: same with `article: first-child`

#### More than one class

```css
.notebox.warning {
    border: 4px solid orange;
    font-weight: bold;
}
```

> **Note**: As we learned in the lesson on specificity, an ID has high specificity and will overrule most other selectors. This can make them difficult to deal with. In most cases it is preferable to add a class to the element rather than use an ID, however if using the ID is the only way to target the element — perhaps because you do not have access to the markup and so cannot edit it — this will work.

#### Attribute Selector

| Selector            | Example                         | Description                                                  |
| :------------------ | :------------------------------ | :----------------------------------------------------------- |
| `[*attr*]`          | `a[title]`                      | Matches elements with an attribute name of *attr* — the value in square brackets. |
| `[*attr*=*value*]`  | `a[href="https://example.com"]` | Matches elements with an attribute name of *attr* whose value is exactly *value* — the string inside the quotes. |
| `[*attr*~=*value*]` | `p[class~="special"]`           | Matches elements with an attribute name of *attr* whose value is exactly *value*, or elements with an *attr* attribute containing one or more values, at least one of which matches *value*.Note that in a list of multiple values the separate values are whitespace-separated. |
| `[*attr*|=*value*]` | `div[lang|="zh"]`               | Matches elements with an attribute name of *attr* whose value can be exactly *value* or can begin with *value* immediately followed by a hyphen( - ). |
| `[*attr*^=*value*]` | `li[class^="box-"]`             | Matches elements with an attribute name of *attr* whose value has the substring *value* at the start of it. |
| `[*attr*$=*value*]` | `li[class$="-box"]`             | Matches elements with an attribute name of *attr* whose value has the substring *value* at the end of it. |
| `[*attr**=*value*]` | `li[class*="box"]`              | Matches elements with an attribute name of *attr* whose value contains at least one occurrence of the substring *value* anywhere within the string. |

```css
/*This will be case insensitive*/
li[class^="a" i] { 
    color: red;
}
```

#### Pseudo-classes & Peseudo elements

**Pseudo-classes**

* `:first-child`
* `:last-child`
* `:only-child`
* `:invalid`
* `:hover`
* `:focus`

**Pseudo-elements**

Pseudo-elements behave in a similar way, however they act as if you had added a whole new HTML element into the markup, rather than applying a class to existing elements. Pseudo-elements start with a double colon `::`.

> **Note**: Some early pseudo-elements used the single colon syntax, so you may sometimes see this in code or examples. Modern browsers support the early pseudo-elements with single- or double-colon syntax for backwards compatibility.

For example, if you wanted to select the first line of a paragraph you could wrap it in a `<span>` element and use an element selector; however, that would fail if the number of words you had wrapped were longer or shorter than the parent element's width. As we tend not to know how many words will fit on a line — as that will change if the screen width or font-size changes — it is impossible to robustly do this by adding HTML. 如果`<span>`中内容增加，会导致其进入第二行。

```css
article p::first-line {
    font-size: 120%;
    font-weight: bold;
}  
```

**Combination**

```css
article p:first-child::first-line { 
  font-size: 120%; 
  font-weight: bold; 
}
```

**before & after**

```css
.box::before {
    content: "This should show before the other content."
}   
```

A more valid use of these pseudo-elements is to insert an icon, for example the little arrow added in the example below, which is a visual indicator that we wouldn't want read out by a screenreader:

```css
.box::after {
    content: " ➥"
}   
```

**Reference**

| Selector                                                     | Description                                                  |
| :----------------------------------------------------------- | :----------------------------------------------------------- |
| [`:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/:active) | Matches when the user activates (for example clicks on) an element. |
| [`:any-link`](https://developer.mozilla.org/en-US/docs/Web/CSS/:any-link) | Matches both the `:link` and `:visited` states of a link.    |
| [`:blank`](https://developer.mozilla.org/en-US/docs/Web/CSS/:blank) | Matches an [`` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) whose input value is empty. |
| [`:checked`](https://developer.mozilla.org/en-US/docs/Web/CSS/:checked) | Matches a radio button or checkbox in the selected state.    |
| `:current`                                                   | Matches the element, or an ancestor of the element, that is currently being displayed. |
| [`:default`](https://developer.mozilla.org/en-US/docs/Web/CSS/:default) | Matches the one or more UI elements that are the default among a set of similar elements. |
| [`:dir`](https://developer.mozilla.org/en-US/docs/Web/CSS/:dir) | Select an element based on its directionality (value of the HTML `dir` attribute or CSS `direction` property). |
| [`:disabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/:disabled) | Matches user interface elements that are in an disabled state. |
| [`:empty`](https://developer.mozilla.org/en-US/docs/Web/CSS/:empty) | Matches an element that has no children except optionally white space. |
| [`:enabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/:enabled) | Matches user interface elements that are in an enabled state. |
| [`:first`](https://developer.mozilla.org/en-US/docs/Web/CSS/:first) | In [Paged Media](https://developer.mozilla.org/en-US/docs/Web/CSS/Paged_Media), matches the first page. |
| [`:first-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:first-child) | Matches an element that is first among its siblings.         |
| [`:first-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:first-of-type) | Matches an element which is first of a certain type among its siblings. |
| [`:focus`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus) | Matches when an element has focus.                           |
| [`:focus-visible`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) | Matches when an element has focus and the focus should be visible to the user. |
| [`:focus-within`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within) | Matches an element with focus plus an element with a descendent that has focus. |
| `:future`                                                    | Matches the elements after the current element.              |
| [`:hover`](https://developer.mozilla.org/en-US/docs/Web/CSS/:hover) | Matches when the user hovers over an element.                |
| [`:indeterminate`](https://developer.mozilla.org/en-US/docs/Web/CSS/:indeterminate) | Matches UI elements whose value is in an indeterminate state, usually [checkboxes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox). |
| [`:in-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/:in-range) | Matches an element with a range when its value is in-range.  |
| [`:invalid`](https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid) | Matches an element, such as an ``, in an invalid state.      |
| [`:lang`](https://developer.mozilla.org/en-US/docs/Web/CSS/:lang) | Matches an element based on language (value of the HTML [lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang) attribute). |
| [`:last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:last-child) | Matches an element which is last among its siblings.         |
| [`:last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:last-of-type) | Matches an element of a certain type that is last among its siblings. |
| [`:left`](https://developer.mozilla.org/en-US/docs/Web/CSS/:left) | In [Paged Media](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Pages), matches left-hand pages. |
| [`:link`](https://developer.mozilla.org/en-US/docs/Web/CSS/:link) | Matches unvisited links.                                     |
| `:local-link`                                                | Matches links pointing to pages that are in the same site as the current document. |
| [`:is()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) | Matches any of the selectors in the selector list that is passed in. |
| [`:not`](https://developer.mozilla.org/en-US/docs/Web/CSS/:not) | Matches things not matched by selectors that are passed in as a value to this selector. |
| [`:nth-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child) | Matches elements from a list of siblings — the siblings are matched by a formula of the form an+b (e.g. 2n + 1 would match elements 1, 3, 5, 7, etc. All the odd ones.) |
| [`:nth-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-of-type) | Matches elements from a list of siblings that are of a certain type (e.g. `` elements) — the siblings are matched by a formula of the form an+b (e.g. 2n + 1 would match that type of element, numbers 1, 3, 5, 7, etc. All the odd ones.) |
| [`:nth-last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-child) | Matches elements from a list of siblings, counting backwards from the end. The siblings are matched by a formula of the form an+b (e.g. 2n + 1 would match the last element in the sequence, then two elements before that, then two elements before that, etc. All the odd ones, counting from the end.) |
| [`:nth-last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-of-type) | Matches elements from a list of siblings that are of a certain type (e.g. `` elements), counting backwards from the end. The siblings are matched by a formula of the form an+b (e.g. 2n + 1 would match the last element of that type in the sequence, then two elements before that, then two elements before that, etc. All the odd ones, counting from the end.) |
| [`:only-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:only-child) | Matches an element that has no siblings.                     |
| [`:only-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:only-of-type) | Matches an element that is the only one of its type among its siblings. |
| [`:optional`](https://developer.mozilla.org/en-US/docs/Web/CSS/:optional) | Matches form elements that are not required.                 |
| [`:out-of-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range) | Matches an element with a range when its value is out of range. |
| `:past`                                                      | Matches the elements before the current element.             |
| [`:placeholder-shown`](https://developer.mozilla.org/en-US/docs/Web/CSS/:placeholder-shown) | Matches an input element that is showing placeholder text.   |
| `:playing`                                                   | Matches an element representing an audio, video, or similar resource that is capable of being “played” or “paused”, when that element is “playing”. |
| `:paused`                                                    | Matches an element representing an audio, video, or similar resource that is capable of being “played” or “paused”, when that element is “paused”. |
| [`:read-only`](https://developer.mozilla.org/en-US/docs/Web/CSS/:read-only) | Matches an element if it is not user-alterable.              |
| [`:read-write`](https://developer.mozilla.org/en-US/docs/Web/CSS/:read-write) | Matches an element if it is user-alterable.                  |
| [`:required`](https://developer.mozilla.org/en-US/docs/Web/CSS/:required) | Matches form elements that are required.                     |
| [`:right`](https://developer.mozilla.org/en-US/docs/Web/CSS/:right) | In [Paged Media](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Pages), matches right-hand pages. |
| [`:root`](https://developer.mozilla.org/en-US/docs/Web/CSS/:root) | Matches an element that is the root of the document.         |
| [`:scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/:scope) | Matches any element that is a scope element.                 |
| [`:valid`](https://developer.mozilla.org/en-US/docs/Web/CSS/:valid) | Matches an element such as an `` element, in a valid state.  |
| [`:target`](https://developer.mozilla.org/en-US/docs/Web/CSS/:target) | Matches an element if it is the target of the current URL (i.e. if it has an ID matching the current [URL fragment](https://en.wikipedia.org/wiki/Fragment_identifier)). |
| [`:visited`](https://developer.mozilla.org/en-US/docs/Web/CSS/:visited) | Matches visited links.                                       |

| Selector                                                     | Description                                                  |
| :----------------------------------------------------------- | :----------------------------------------------------------- |
| [`::after`](https://developer.mozilla.org/en-US/docs/Web/CSS/::after) | Matches a stylable element appearing after the originating element's actual content. |
| [`::before`](https://developer.mozilla.org/en-US/docs/Web/CSS/::before) | Matches a stylable element appearing before the originating element's actual content. |
| [`::first-letter`](https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter) | Matches the first letter of the element.                     |
| [`::first-line`](https://developer.mozilla.org/en-US/docs/Web/CSS/::first-line) | Matches the first line of the containing element.            |
| [`::grammar-error`](https://developer.mozilla.org/en-US/docs/Web/CSS/::grammar-error) | Matches a portion of the document containing a grammar error as flagged by the browser. |
| [`::selection`](https://developer.mozilla.org/en-US/docs/Web/CSS/::selection) | Matches the portion of the document that has been selected.  |
| [`::spelling-error`](https://developer.mozilla.org/en-US/docs/Web/CSS/::spelling-error) | Matches a portion of the document containing a spelling error as flagged by the browser. |

#### Other selectors

**General sibiling**

If you want to select siblings of an element even if they are not directly adjacent, then you can use the general sibling combinator (`~`). To select all `` elements that come *anywhere* after `` elements, we'd do this:

```html
<article>
    <h1>A heading</h1>
    <p>I am a paragraph.</p> <!-- yes -->
    <div>I am a div</div>
    <p>I am another paragraph.</p> <!-- yes -->
</article>
```

`h1 ~p{}` will select all `<p>` that has the same parent.

## Box Model 盒模型

#### 块级盒子 & 内联盒子 (Block Box & Inline Box)

一个被定义成块级的（block）盒子会表现出以下行为:

- 盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽
- 每个盒子都会换行
- [`width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width) 和 [`height`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/height) 属性可以发挥作用
- 内边距（padding）, 外边距（margin） 和 边框（border） 会将其他元素从当前盒子周围“推开”



如果一个盒子对外显示为 `inline`，那么他的行为如下:

- 盒子不会产生换行。
-  [`width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width) 和 [`height`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/height) 属性将不起作用。
- 内边距、外边距以及边框会被应用但是不会把其他处于 `inline` 状态的盒子推开。

#### 内部与外部显示类型

同样盒模型还有内部显示类型，它决定了盒子内部元素是如何布局的。默认情况下是按照 **[正常文档流](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow)** 布局，也意味着它们和其他块元素以及内联元素一样(如上所述).

但是，我们可以通过使用类似 `flex` 的 `display` 属性值来更改内部显示类型。 如果设置 `display: flex`，在一个元素上，外部显示类型是 `block`，但是内部显示类型修改为 `flex`。 该盒子的所有直接子元素都会成为flex元素，会根据 [弹性盒子（Flexbox](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox) [）](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox)规则进行布局。

> More information in [Block and Inline Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/Block_and_Inline_Layout_in_Normal_Flow).

#### 不同类型显示的例子

Case 1:

让我们继续看看别的例子。下面三个html元素，都有一个外部显示类型 `block`。第一个是一个段落，在 CSS 中加了边框。浏览器把它渲染成一个块级盒子，所以段落从新的一行开始，而且宽度占满一行。

第二个是一个列表，布局属性是 `display: flex`。 将在容器中建立一个flex布局，但是每个列表是一个块级元素 —— 像段落一样 —— 会充满整个容器的宽度并且换行。

下面有个块级段落，里面有两个 `<span>`元素。正常情况下是 `inline`，但是其中一个加了block类，设置属性 `display: block`。

![1](/images/2020-03-21/1.png)

```css
p, 
ul {
  border: 2px solid rebeccapurple;
  padding: .5em;
}
.block,
li {
  border: 2px solid blue;
  padding: .5em;
}
ul {
  display: flex; /*也就是外部类型变为block，内部变为flex？？同时设置了俩？？*/
  list-style: none;
}
.block {
  display: block;
}      
  
```

Case 2:

我们可以看到 `inline` 元素在下面例子中的表现。 `` 在第一段默认是内联元素所以不换行。

还有一个 `` 设置为 `display: inline-flex`，使得在一些flex元素外创建一个内联框。

最后设置两个段落为 `display: inline`。  inline flex 容器和段落在一行上而不是像块级元素一样换行。

![2](/images/2020-03-21/2.png)

```css
p, 
ul {
  border: 2px solid rebeccapurple;
}
span,
li {
  border: 2px solid blue;
}
ul {
  display: inline-flex; /* 注意不存在block-flex */
  list-style: none;
  padding: 0;
} 
.inline {
  display: inline;
}
```
#### 标准盒模型 & 替代盒模型

盒模型由 Content box, Padding box, Border box 和 Margin box 组成。

标准盒模型的`width` 和 `height` 针对的是content box；

替代盒模型的`width` 和 `height` 针对的是content box + padding box + border box；

浏览器默认情况使用的是标准盒模型，可以通过 `box-sizing: border-box`来转换为替代盒模型，如果想要所有元素均使用替代盒模型可以：

```css
html{
	box-sizing: border-box;
}
*,
*::before,
*::after{
  box-sizing: inherit;
}
```

#### 小知识

1. margin 可以为负数，但padding不能。

2. 使用`display: inline-block` 可以达到介于 `inline` 与 `block` 的中间效果，即：

- 设置`width` 和`height` 属性会生效。
- `padding`, `margin`, 以及`border` 会推开其他元素。

想要通过添加内边距使链接具有更大的命中区域时，这是很有用的。

## 背景与边框

#### 调整背景图像的大小

可以使用 `background-size` 来调整背景图像的大小。

* cover：浏览器将使图像足够大，使它完全覆盖了盒子区，同时仍然保持其高宽比。在这种情况下，有些图像可能会跳出盒子外；
* contain：浏览器将使图像的大小适合盒子内。在这种情况下，如果图像的长宽比与盒子的长宽比不同，则可能在图像的任何一边或顶部和底部出现间隙。

#### 背景图像的位置

将从顶部调整20px，从右侧调整10px。

```css
.box { 
  background-image: url(star.png); 
  background-repeat: no-repeat; 
  background-position: top 20px right 10px; 
} 
```

background-position是background-position-x和background-position-y的缩写。

#### 渐变与多背景图像

[cssgradient](https://cssgradient.io/)提供了在线生成渐变背景的代码。

也可以有多个背景图像—在单个属性值中指定多个`background-image`值，用逗号分隔每个值。当你这样做时，你可能会以背景图像互相重叠而告终。背景将与最后列出的背景图像层在堆栈的底部，而之前的每个图像层在代码中紧随其后的图像的顶部。

> **注意：**渐变可以与常规的背景图像很好地混合在一起。

```css
background-image: url(image1.png), url(image2.png), url(image3.png), url(image1.png);
background-repeat: no-repeat, repeat-x, repeat;
background-position: 10px 20px,  top right;
```

不同属性的每个值将与其他属性中相同位置的值匹配。例如，上面的image1的background-repeat值将是no-repeat。但是，当不同的属性具有不同数量的值时，会发生什么情况呢？答案是较小数量的值会循环—在上面的例子中有四个背景图像，但是只有两个背景位置值。前两个位置值将应用于前两个图像，然后它们将再次循环—image3将被赋予第一个位置值，image4将被赋予第二个位置值。

#### 背景附加

`background-attachment` 控制当滚轮滚动时，背景如何变化：

- `scroll`: 使元素的背景在页面滚动时滚动。如果滚动了元素内容，则背景不会移动。实际上，背景被固定在页面的相同位置，所以它会随着页面的滚动而滚动。
- `fixed`: 使元素的背景固定在视图端口上，这样当页面或元素内容滚动时，它就不会滚动。它将始终保持在屏幕上相同的位置。
- `local`: 这个值是后来添加的(它只在Internet Explorer 9+中受支持，而其他的在IE4+中受支持)，因为滚动值相当混乱，在很多情况下并不能真正实现您想要的功能。局部值将背景固定在设置的元素上，因此当您滚动元素时，背景也随之滚动。

#### 使用background这个缩写

这里有一些规则，需要在简写背景属性时遵循，例如:

- `background-color` 只能在逗号之后指定。
- `background-size` 值只能包含在背景位置之后，用'/'字符分隔，例如：`center/80%`。

#### border的一些特性

通过使用[`border-radius`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius)属性和与方框的每个角相关的长边来实现方框的圆角。可以使用两个长度或百分比作为值，第一个值定义水平半径，第二个值定义垂直半径。在很多情况下，您将只传递一个值，这两个值都将使用。

## 处理不同的文本方向

#### 书写模式

书写模式通过 `writting-mode` 来进行改变。如下面的会使文字变为竖向：

```css
h1 {
  writing-mode: vertical-rl;
}
```

`writting-mode` 对应的三个值是：

- `horizontal-tb`: 块流向从上至下。对应的文本方向是横向的。
- `vertical-rl`: 块流向从右向左。对应的文本方向是纵向的。
- `vertical-lr`: 块流向从左向右。对应的文本方向是纵向的。

当我们切换书写模式时，我们也在改变块和内联文本的方向。`horizontal-tb`书写模式下块的方向是从上到下的横向的，而 `vertical-rl`书写模式下块的方向是从右到左的纵向的。因此，块维度指的总是块在页面书写模式下的显示方向。而内联维度指的总是文本方向。 

#### 书写模式改变后盒子的尺寸

横向书写模式下，映射到`width`的属性被称作内联尺寸（[`inline-size`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inline-size)）——内联维度的尺寸。而映射`height`的属性被称为块级尺寸（[`block-size`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/block-size)），这是块级维度的尺寸。下面的例子展示了替换掉`width`的`inline-size`是如何生效的。

```css
.box {
  inline-size: 150px;
}
.horizontal {
  writing-mode: horizontal-tb;
}
.vertical {
  writing-mode: vertical-rl;
}
```

![3](/images/2020-03-21/3.png)

#### 更多的映射属性

`margin-top`属性的映射是[`margin-block-start`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-block-start)——总是指向块级维度开始处的边距。[`padding-left`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-left)属性映射到 [`padding-inline-start`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-inline-start)，这是应用到内联开始方向（这是该书写模式文本开始的地方）上的内边距。[`border-bottom`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom)属性映射到的是[`border-block-end`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-end)，也就是块级维度结尾处的边框。

#### 逻辑值

目前为止我们看到的都是逻辑属性的名称。还有一些属性的取值是一些物理值（如`top`、`right`、`bottom`和`left`）。这些值同样拥有逻辑值映射（`block-start`、`inline-end`、`block-end`和`inline-start`）。

## 溢出

#### 溢出的例子

第一个例子是，一个盒子，在块方向上已经受到`height`的限制。然后我们已经加了过多的内容，以至于盒子里面没有空间容纳。内容正在从盒子里面溢出，并让自己把盒子下面的段落弄得一团糟。

第二个例子是一个单词，位于在内联方向上受到限制的盒子里面。盒子已经被做得小到无法放置那个单词的地步，于是那个单词就突破了盒子的限制。

在盒子里面需要放置文本的时候，限制住块方向的尺寸是会引起问题的，因为可能会有比你在设计网站的时候所预计的文本更多的文本，或者文本变大了——比如用户增加字体大小的时候。

#### 处理溢出

overflow属性是处理溢出的常见方式：

* `overflow: visible` 这是default，会使文本在超过盒子时溢出
* `overflow: hidden` 隐藏溢出内容
* `overflow: scroll` 设置滚动条来显示溢出的内容，但内容未溢出时滚动条仍然存在
* `overflow-x: scroll` 仅仅允许在x方向上发生滚动
* `overflow-y: scroll `仅仅允许在y方向上发生滚动
* `overflow: scroll hidden `x方向上scroll，y方向上hidden

## CSS中的值与单位

#### 长度

绝对长度：

| 单位 | 名称         | 等价换算            |
| :--- | :----------- | :------------------ |
| `cm` | 厘米         | 1cm = 96px/2.54     |
| `mm` | 毫米         | 1mm = 1/10th of 1cm |
| `Q`  | 四分之一毫米 | 1Q = 1/40th of 1cm  |
| `in` | 英寸         | 1in = 2.54cm = 96px |
| `pc` | 十二点活字   | 1pc = 1/16th of 1in |
| `pt` | 点           | 1pt = 1/72th of 1in |
| `px` | 像素         | 1px = 1/96th of 1in |

相对长度：

| 单位   | 相对于            |
| :----- | :---------------- |
| `em`   | 父元素的字体大小  |
| `ex`   | 字符“x”的高度     |
| `ch`   | 数字“0”的宽度     |
| `rem`  | 根元素的字体大小  |
| `lh`   | 元素的line-height |
| `vw`   | 视窗宽度的1%      |
| `vh`   | 视窗高度的1%      |
| `vmin` | 视窗较小尺寸的1%  |
| `vmax` | 视图大尺寸的1%    |

#### ems & rems & %

首先，我们将16px设置为`<html>`元素的字体大小。

em -

**概括地说，em单位的意思是“父元素的字体大小”**。带有ems类的`<ul>`内的`<li>`元素从它们的父元素中获取大小。因此，每一个连续的嵌套级别都会**逐渐变大**，因为每个嵌套的字体大小都被设置为1.3em—是其父嵌套字体大小的1.3倍。

rem -

**概括地说，rem单位的意思是“根元素的字体大小”**。(“根em”的rem标准。)`<ul>`内的`<li>`元素和一个rems类从根元素`<html>`中获取它们的大小。这意味着每一个连续的嵌套层都**不会不断变大**。

% -

在许多情况下，百分比与长度的处理方法是一样的。百分比的问题在于，它们总是相对于其他值设置的。例如，如果将元素的字体大小设置为百分比，那么它将是元素父元素字体大小的百分比。如果使用百分比作为宽度值，那么它将是父值宽度的百分比。因此，如果`<ul>` 内的`<li>`通过百分比设置大小，每一个嵌套级别都会逐**渐变小**。

#### 数字

有些值接受数字，不添加任何单位。接受无单位数字的属性的一个例子是不透明度属性（`opacity` ），它控制元素的不透明度(它的透明程度)。此属性接受0(完全透明)和1(完全不透明)之间的数字。

> **注意**: 当您在CSS中使用数字作为值时，它不应该用引号括起来。

#### 颜色

**十六进制值RGB**

由于$16\times16 = 256$ ，因此RGB值由6位组成，每两位表示一个通道值。

**rgb() & rgba() 函数**

还可以使用RGBA颜色——它们的工作方式与RGB颜色完全相同，因此您可以使用任何RGB值，但是有第四个值表示颜色的alpha通道，它控制不透明度。如果将这个值设置为`0`，它将使颜色完全透明，而设置为`1`将使颜色完全不透明。介于两者之间的值提供了不同级别的透明度。

> **注意**: 在颜色上设置alpha通道与使用我们前面看到的[`opacity`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/opacity)属性有一个关键区别。当你使用不透明度时，你让元素和它里面的所有东西都不透明，而使用RGBA颜色只让你指定的颜色不透明。

## CSS中的尺寸

#### 固有尺寸

空的`<div>`是没有尺寸的，但他的宽会扩展到整个父容器，这是由块级元素的特性所决定的。

但如果给`<div>`标签中添加文本，标签也就有了高度。元素的固有尺寸 — 由其所包含的内容决定。

#### 设置具体的尺寸

我们可以给`<div>`标签一个width和一个height，无论放什么元素进去，它都是这个尺寸，这就涉及到上面所谈到的溢出的问题。由于溢出的特性，在设置特定的高度时需要格外的小心。

#### 设置百分数

为父级元素宽度的百分比，没有设置，default 100%。

且高度和宽度都是以内联尺寸的百分数来进行计算的。

#### 最大与最小尺寸

通过padding来指定最小尺寸：

如果你有一个包含了变化容量的内容的盒子，而且你总是想让它**至少**有个确定的高度，你应该给它设置一个padding属性。盒子就会一直保持大于这个最小高度，但是如果有比这个盒子在最小高度状态下所能容纳的更多内容，那么盒子就会变大。

max-width：//其实有点没有懂它的好处哈哈

作为示例，如果你设定一个图像的属性为`width: 100%`，而且它的原始宽度小于容器，图像会被强制拉伸以变大，看起来像素更加明显。如果它的原始宽度大于容器，它则会溢出。两种情形都不是你想要看到的。

这个技术是用来让图片**可响应**的，所以在更小的设备上浏览的时候，它们会合适地缩放。你无论怎样都不应该用这个技术先载入大原始尺寸的图片，再对它们在浏览器中进行缩放。图像应该合适地调整尺寸，以使它们不会比预计中展示时所需要的最大尺寸大。下载过大的图像会造成你的网站变慢，如果用户使用按量收费的网络连接，会让用户花更多钱。

#### 视口单位

`1vh`等于视口高度的1%，`1vw`则为视口宽度的1%。

**嵌入的`<iframe>`的大小即是对上面示例而言的视口。**

⚠️在你的设计中，根据视口改变物件的大小是很有用的。例如，如果你想要在你其他内容之前，有一个充满整个视口的视觉宣传段落，让你的页面的那个部分有100vh高的话，会把剩下的内容推到视口的下面，只有向下滚动文档的时候它们才会出现。

## 图像、媒体和表单元素

#### 图像

object-fit：它有点类似于background-size。可以设置为cover, contain, fill（不维持长宽比，全部填满）。

#### 布局中的替换元素

在替换元素使用各式CSS布局技巧时，你可能深切地体会到他们的展现略微与其他元素不同，例如，在一个flex或者grid布局中，元素默认会把拉伸到充满整块区域。图像不会拉伸，而是会被对齐到网格区域或者弹性容器的起始处。

#### 表单元素

在一些浏览器中，表单元素默认不会继承字体样式，因此如果你想要确保你的表单填入区域使用body中或者一个父元素中定义的字体，你需要向你的CSS中加入这条规则。

为了保证统一，将所有元素的内外边距均设为`0`是个好主意，然后在单独进行样式化控制的时候将这些加回来。

除了上面提到的规则以外，你也应该在`<textarea>`上设置`overflow: auto` 以避免IE在不需要滚动条的时候显示滚动条。

作为最后一步，我们可以将上面讨论过的各式属性包起来，成为以下的“表单重置”，以提供一个统一的在其上继续进行工作的地基：

```css
button, 
input, 
select, 
textarea { 
  font-family: inherit; 
  font-size: 100%; 
  box-sizing: border-box; 
  padding: 0; margin: 0; 
} 
textarea { 
  overflow: auto; 
} 
```

> **备注**：通用样式表被许多开发者用作所有项目的一系列基础样式，典型就是那些做了和以上提到相似的事情的那些，在你开始自己的CSS作业前，它确保了跨浏览器的任何事情都被默认设定为统一样式。它们不像以往那么重要了，因为浏览器显著地要比以往更加统一。但是，如果你想要看一个例子，可以看看这个[Normalize.css](http://necolas.github.io/normalize.css/)，它被许多项目用作基础，是非常流行的样式表。

## 表格

- 在你的表上，给[`table-layout`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/table-layout)属性设置一个为`fixed`的值通常是一个好主意，因为它使表的行为在默认情况下更可预测。通常情况下，表列的尺寸会根据所包含的内容大小而变化，这会产生一些奇怪的结果。通过 `table-layout: fixed`，您可以根据列标题的宽度来规定列的宽度，然后适当地处理它们的内容。这就是为什么我们使用了`thead th:nth-child(n)` 选择了四个不同的标题([`:nth-child`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-child))选择器（“选择第n个子元素，它是一个顺序排列的[`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/th)元素，且其父元素是元素”）并给定了它们的百分比宽度。整个列宽度与列标题的宽度是一样的，这是一种很好的设定表列尺寸的方式。Chris Coyier在[Fixed Table Layouts](https://css-tricks.com/fixing-tables-long-strings/)中更详细地讨论了这一技术。

  我们将它与一个100%的[`width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width)组合在一起，这意味着该表将填充它放入的任何容器，并且能很好的响应（虽然它仍然需要更多的工作来让它在窄屏宽度上看起来很好）。

- 一个[`border-collapse`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-collapse)属性的`collapse`值对于任何表样式的工作来说都是一个标准的最佳实践。默认情况下，当您在表元素上设置边框时，它们之间将会有间隔。

- 我们在整个表设置了一个[`border`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border)，这是必要的，因为我们将在表页眉和页脚后面设置一些边框——当你在表格外面没有一个边界而且以空隙结尾的时候，它看起来很奇怪，而且是不连贯的。

- 我们在[`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/th)和[`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/td)元素上设置了一些[`padding`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding)——这些元素使数据项有了一些空间，使表看起来更加清晰。

⚠️在[Google Fonts](https://www.google.com/fonts)上找到了一种适合字体

```html
<link href='https://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
```

- 我们已经设置了一个全局无衬线字体;这纯粹是一种风格上的选择。我们还在和元素的标题上设置了自定义字体，这是一种很不错的、很有朋克风格的外观。
- 我们在标题和单元格上设置了一些[`letter-spacing`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/letter-spacing)，因为我们觉得它有助于提高可读性。再次强调，这主要是一种风格上的选择。
- 我们在中的表格单元中对文本进行了居中对齐，使它们与标题对齐。默认情况下，单元格被赋予了一个[`text-align`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align)的`left`值，并且标题被赋予了一个`center`值，但是通常情况下，让两者对齐看起来更好。标题字体的默认粗体值足以区分它们的外观。
- 我们在中对标题进行了右对齐，以便与它的数据点更好地关联。

## Debugging

[戳](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Debugging_CSS)

## 组织CSS

尤其在你对站点的不同部分设置了很不同的样式的时候，你会想要有个包含了所有普适规则的样式表，还有包含了某些段落所需要的特定规则的更小的样式表。你可以将一个页面连接到多个样式表，层叠的一般规则会在这里生效，即连接的靠前的样式表里面的规则会比后面的有更高优先级。

另一种组织CSS的方法是利用一些对于前端开发者可用的工具，它们让你可以稍微更程式化地编写CSS。有很多工具，我们将它们分成**预处理工具**和**后处理工具**。预处理工具以你的原文件为基础运行，将它们转化为样式表；后处理工具使用你已完成的样式表，然后对它做点手脚——也许是优化它以使它加载得更快。

**预处理**

最为流行的预处理工具是[Sass](https://sass-lang.com/)，这里不是Sass的教程，所以我只会简要地解释一些Sass能做的事情，在组织的时候真的会帮到你，即使你没有用到Sass的任何其他的独特功能。

1. 定义变量

```css
$base-color: #c6538c;

.alert {
  border: 1px solid $base-color;
}
```

2. 编译组件样式表

我在上面提到了，一种组织CSS的方式是将样式表分成小的样式表。在使用Sass时，你可以在另一个层次上理解，然后得到许多小样式表——甚至到了每个组件都有一个独立样式表的地步。使用Sass中的include功能，这些都可以被编译为一个、或者少数几个真正链接到你的网站的样式表。

在[这篇博文](https://www.lauraleeflores.com/blog/how-to-organize-your-css-files)里面，你可以看下一个开发者是如何处理这个问题的。

**后处理**

如果你对加入例如许多额外的注释和空格，增大你的样式表大小有所关心的话，那么后处理会通过在生产版本中略去任何不必要的东西的方式，优化CSS。后处理解决方案中，通过这种方式实现的一个例子是[cssnano](https://cssnano.co/)。

END。
